Формы
=====

Форма --- это это структурированные web-сведения в JSON формате.
Они позволяют создавать собственные модели данных на основе ваших бизнес-процессов.
В клиентском приложении они генерируются на основе JSON-схем, которые задаются в конфигураторе.

Задание формы в конфигураторе
-----------------------------

Для создания формы в конфигураторе надо перейти на вкладку **Forms**:

..  image:: images/forms-1-strapi.png
    :alt: Форма в конфигураторе
    :align: center

Нажатием на кнопку |Add Form| создаётся форма.

..  |Add Form| image:: images/forms-2-add-form.png
                :alt: Кнопка: Добавить форму

Перед вами открывается окно создание формы:

..  image:: images/forms-3-creating.png
    :alt: Создание формы в конфигураторе
    :align: center

#.  Это основное рабочее пространство, в котором записывается JSON-схема.
#.  Здесь записывается название формы, которое будет отображаться в конфигураторе и клиентском приложении.
#.  В это поле стоит записывать краткое описание формы, которое может пояснять её необходимость.
#.  Чтобы форма опубликовалась в разделе форм в клиентском приложении в этом пункте надо добавить элемент ``customForm``.
#.  После того, как все поля были заполнены, форму необходимо сохранить.
#.  Эта кнопка позволит опубликовать заданную форму.

JSON-схема формы
----------------

..  code-block:: json
    
    {
        "id": "string (uuid?)",
        "title": "string",
        "properties": {
            "FIELDNAME": {
                "type": "Здесь задаются компоненты формы",
                "title": "string",
                "description": "string",
                "enum": "string[]",
                "enumNames": "string[]",
                "minItems": "number",
                "maxItems": "number",
                "minLength": "number",
                "maxLength": "number",
                "items":  { "..."
                },
            }
        },
        "required": "[ FIELDNAMES ]",
        "order": "[ FIELDNAMES ]",
        "dependencies": {
            "FIELDNAME_0": "[OTHER_FIELDNAMES]"
            }
    }

``id`` --- поле, необходимое для идентификации схемы формы.

``title`` --- заголовок формы.

``properties`` --- список полей формы:

``FIELDNAME`` --- название поля, которое задается пользователем.
    
*   ``type`` --- выбор компонента.
*   ``title`` --- название поля, отображаемое в форме.
*   ``description`` --- описание поля. Отображается как заглушка поля в форме. Подходит для полей:
*   ``default`` --- значение поля по умолчанию. На данный момент только для ``status``. 
*   ``enum`` --- список доступных значений.
*   ``enumNames`` --- список меток для значений из поля ``enum``, отображающихся в форме.
*   ``minItems`` --- минимальное количество выбранных элементов для того, чтобы заполненная форма считалась корректной
*   ``maxItems`` --- максимальное количество выбранных элементов для того, чтобы заполненная форма считалась корректной
*   ``minLength`` --- минимальное количество символов в поле для того, чтобы заполненная форма считалась корректной
*   ``maxLength`` --- максимальное количество символов в поле для того, чтобы заполненная форма считалась корректной
*   ``items`` --- множественный выбор из доступных значений. Иначе --- возможность добавлять элементы заданного типа.

``required`` --- список полей, обязательных к заполнению

``order`` --- порядок следования полей в форме.
Можно указывать не все поля, в таком случае оставшиеся отобразятся в порядке, указанном в схеме

``dependencies`` --- список зависимых полей.
Если заполнено поле ``FIELDNAME_0``, то поля ``OTHER_FIELDNAMES`` тоже должны быть заполнены.

Работа с формами заключается в правильном использовании компонентов формы. 

Пример полной формы
-------------------

..  literalinclude:: _includes/example-forms.json
    :language: json