Query
=====

Запрос (query) --- это описание выборки данных системы на языке SQL или встроенного языка запросов.
Запросы используются в представлениях для обработки и извлечения сведений из состояния системы.

Структура Query
---------------

..	code-block:: json
	
    {
      "sort": [
        {
          "sort": "...",
          "property": "..."
        }
      ],
      "type": "...",
      "query": [
        {
          "value": "${...}",
          "operator": "...",
          "property": "..."
        },
        {
          "group": [
            {
              "value": "...",
              "operator": "...",
              "property": "..."
            }
          ],
          "logical": "..."
        }
      ],
      "pagination": {
        "limit": 20,
        "offset": 0
      }
    }

Верхний уровень
+++++++++++++++

..	code-block:: json
	
    {
      "sort": [ {"...": "..."} ],
      "type": "...",
      "query": [ {"...": "..." } ],
      "pagination": {"...": "..." }
    }


..  list-table::
    :widths: 10 80 10
    :header-rows: 1
    :align: left

    *   - Поле
        - Определение
        - Тип данных
    *   - ``sort``
        - В поле записывается сортировка для полей справочника или экземлпяра формы.
        - **array of objects**
    *   - ``type``
        - В этом поле определяется, на основе чего вы хотите создать представление: справочник --- ``dictionary`` ---
          или экземпляр формы --- ``formInstance``.
        - **string**
    *   - ``query``
        - В этом блоке описываются запросы, которые необходимо совершить.
        - **array of objects**
    
Sort
++++

В поле записывается сортировка для полей справочника или экземлпяра формы.
Поле содержит объекты, которые состоят из полей ``sort`` и ``propery``.
Объектов может быть столько же сколько полей есть справочнике или экземпляре формы.

..	code-block:: json
	
    {
      "sort": [
        {
          "sort": "...",
          "property": "..."
        }
      ]
    }

..  list-table::
    :widths: 10 80 10
    :header-rows: 1
    :align: left

    *   - Поле
        - Определение
        - Тип данных
    *   - ``sort``
        - В это поле записывается тип сортировки, который вы хотите применить к полю: ``DESCENDING`` (по убыванию) или ``ASCENDING`` (по возрастанию).
        - **string**
    *   - ``property``
        - В это поле записывается наименование поля справочника или экземпляра формы, которое вы хотите отсортиртировать.
        - **string**

Query
+++++

В этом блоке описываются запросы, которые необходимо совершить.
Запрос состоит из полей **value**, **operator** и **property**.

Также внутри блока ``query`` могут быть описаны блоки ``group`` для дполнительной фильтрации данных.

..  code-block:: json

    {
        "query": [
        {
          "value": "${...}",
          "operator": "...",
          "property": "..."
        },
        {
          "group": [
            {
              "value": "...",
              "operator": "...",
              "property": "..."
            }
          ],
          "logical": "..."
        }
        ]
    }

..  list-table::
    :widths: 10 80 10
    :header-rows: 1
    :align: left

    *   - Поле
        - Определение
        - Тип данных
    *   - ``value``
        - В этом поле записывются данные, по которым необходимо фильтровать в запросе.
          Наименование какого-то поля указывается с использованием шаблонных литералов --- ``${...}``.
        - **string**
    *   - ``operator``
        - В этом поле указывается, какой оператор необходимо использовать при запросе.
          Операторы подробнее описаны ниже на этой странице.
        - **string**
    *   - ``property``
        - В этом поле указываются данные, с которыми сравнивается ``value``.
        - **string**
    *   - ``group``
        - Блоки этого типа необходимы для дополнительных фильтров. В запросе их может быть несколько.
          Каждый такой блок также состоит из ``value``, ``operator`` и ``property``,
          которые аналогичны перечисленным выше.
        - **array of objects**
    *   - ``logical``
        - Поле служит для группировки блоков ``group`` и объединяет их с самим ``query``.
          
          По умолчанию там пишется ``AND``, но также можно прописать ``OR``.
        - **string**

Операторы
---------

Операторы в Query представляют из себя типичные логические операторы.
Операторы деляется на простые и сложные. Простые используются для работы с примитивами.
Сложные нужны для работы с **jsonb-моделью**.

Простые операторы
+++++++++++++++++

..  list-table::
    :widths: 10 90
    :header-rows: 1
    :align: left

    *   - Оператор
        - Определение
    *   - ``eq``
        - эквивалентность, то есть равенство.
    *   - ``neq``
        - неэквивалентность --- неравенство.
    *   - ``gte``
        - больше или равно.
    *   - ``lte``
        - меньше или равно.
    *   - ``gt``
        - больше.
    *   - ``lt``
        - меньше.
    *   - ``in``
        - содержит совпадение значения в списке.
    *   - ``nin``
        - не содержит совпадений в списке.
    *   - ``contains``
        - поиск подстроки в строке --- **Василий** содержит **Вас**.
    *   - ``isnull``
        - проверка на ``null`` --- ``property = null``. 
    *   - ``notnull``
        - проверка на то, что не является ``null`` --- ``property != null``.

..  attention:: Для работы ``isnull`` и ``notnull`` необходимо, чтобы ``value`` фильтра было ``null`` или не было вовсе.

Сложные операторы
+++++++++++++++++

Наименования сложных операторов почти не отличаются от простых.
Но помимо логических операций, они ещё могут преобразовывать данные, с которыми работают.
Поэтому ниже хоть наименования идут те же, но описание дополняется.

..  list-table::
    :widths: 10 90
    :header-rows: 1
    :align: left

    *   - Оператор
        - Определение
    *   - ``eq``
        - Эквивалентность то есть равенство. Преобразует поле в текст и сравнивает.
    *   - ``neq``
        - Неэквивалентность --- неравенство. 
          Обратная операция ``eq``, но еще есть проверка, является ли поле ``null``.
    *   - ``gte``
        - Больше или равно. Преобразует в ``decimal`` и сравнивает.
    *   - ``lte``
        - Меньше или равно. Преобразует в decimal и сравнивает.
    *   - ``gt``
        - Больше. Преобразует в decimal и сравнивает.
    *   - ``lt``
        - Меньше. Преобразует в decimal и сравнивает.
    *   - ``in``
        - Содержит совпадение значения в списке. Составляет полный путь до элемента.
    *   - ``contains``
        - Поиск подстроки в строке --- **Василий** содержит **Вас**. Преобразует ``value`` в текст и в нижний регистр.
          
          Если value приходит массивом: ``(["Вас", "ВаСи"])``, ---
          разбивает на составляющие с `или`: `василий` содержит `вас` или `василий` содержит `васи`.
    *   - ``isnull``
        - Проверка на null --- ``property = null``.
          Просто проверка на null, преобразования данных нет.
    *   - ``notnull``
        - Проверка на то, что не является null --- ``property != null``.
          Просто проверка на null, преобразования данных нет.
    *   - ``injson``
        - Для поиска по не вложенным объектам типа json.
          
          Например, поле ``reviewers`` у экземпляра формы.
    *   - ``inObject``
        - Для поиска по единичным значениям типа ``data.document.id``.
          Важно чтобы в конце было именно единичное значение.
          
          Например: ``data: {document: {id: “123”}}``.

..  note:: Для работы с json используются те же операторы,
    только отсутствует ``nin`` и добавляются ``injson`` и ``inObject``.